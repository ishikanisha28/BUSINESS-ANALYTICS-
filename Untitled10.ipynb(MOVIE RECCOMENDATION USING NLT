{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled10.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyOXXJzKDTTsowFgf7BQEPPe",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "TPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ishikanisha28/BUSINESS-ANALYTICS-/blob/main/Untitled10.ipynb(MOVIE%20RECCOMENDATION%20USING%20NLT\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "LOADING DATASET"
      ],
      "metadata": {
        "id": "r3bpsaNyUqFN"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H10Szl9lF2b1",
        "outputId": "90a845d7-cd54-4145-a798-8645dac1642b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount(\"/content/drive\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cd 'drive/My Drive'"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A_k7CPA8HhTp",
        "outputId": "f97f92e1-db1b-49cd-9804-ab972c771ef6"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Errno 2] No such file or directory: 'drive/My Drive'\n",
            "/content/drive/My Drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "data = pd.read_csv(\"wiki_movie_plots_deduped.csv\")\n",
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 354
        },
        "id": "N4XuUidkHnq8",
        "outputId": "34221777-069f-4563-cdfc-941c80c70cc7"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Release Year                             Title Origin/Ethnicity  \\\n",
              "0          1901            Kansas Saloon Smashers         American   \n",
              "1          1901     Love by the Light of the Moon         American   \n",
              "2          1901           The Martyred Presidents         American   \n",
              "3          1901  Terrible Teddy, the Grizzly King         American   \n",
              "4          1902            Jack and the Beanstalk         American   \n",
              "\n",
              "                             Director Cast    Genre  \\\n",
              "0                             Unknown  NaN  unknown   \n",
              "1                             Unknown  NaN  unknown   \n",
              "2                             Unknown  NaN  unknown   \n",
              "3                             Unknown  NaN  unknown   \n",
              "4  George S. Fleming, Edwin S. Porter  NaN  unknown   \n",
              "\n",
              "                                           Wiki Page  \\\n",
              "0  https://en.wikipedia.org/wiki/Kansas_Saloon_Sm...   \n",
              "1  https://en.wikipedia.org/wiki/Love_by_the_Ligh...   \n",
              "2  https://en.wikipedia.org/wiki/The_Martyred_Pre...   \n",
              "3  https://en.wikipedia.org/wiki/Terrible_Teddy,_...   \n",
              "4  https://en.wikipedia.org/wiki/Jack_and_the_Bea...   \n",
              "\n",
              "                                                Plot  \n",
              "0  A bartender is working at a saloon, serving dr...  \n",
              "1  The moon, painted with a smiling face hangs ov...  \n",
              "2  The film, just over a minute long, is composed...  \n",
              "3  Lasting just 61 seconds and consisting of two ...  \n",
              "4  The earliest known adaptation of the classic f...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fd573069-9afb-49f0-b93d-3a9094f3c3ca\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Release Year</th>\n",
              "      <th>Title</th>\n",
              "      <th>Origin/Ethnicity</th>\n",
              "      <th>Director</th>\n",
              "      <th>Cast</th>\n",
              "      <th>Genre</th>\n",
              "      <th>Wiki Page</th>\n",
              "      <th>Plot</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1901</td>\n",
              "      <td>Kansas Saloon Smashers</td>\n",
              "      <td>American</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>NaN</td>\n",
              "      <td>unknown</td>\n",
              "      <td>https://en.wikipedia.org/wiki/Kansas_Saloon_Sm...</td>\n",
              "      <td>A bartender is working at a saloon, serving dr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1901</td>\n",
              "      <td>Love by the Light of the Moon</td>\n",
              "      <td>American</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>NaN</td>\n",
              "      <td>unknown</td>\n",
              "      <td>https://en.wikipedia.org/wiki/Love_by_the_Ligh...</td>\n",
              "      <td>The moon, painted with a smiling face hangs ov...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1901</td>\n",
              "      <td>The Martyred Presidents</td>\n",
              "      <td>American</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>NaN</td>\n",
              "      <td>unknown</td>\n",
              "      <td>https://en.wikipedia.org/wiki/The_Martyred_Pre...</td>\n",
              "      <td>The film, just over a minute long, is composed...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1901</td>\n",
              "      <td>Terrible Teddy, the Grizzly King</td>\n",
              "      <td>American</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>NaN</td>\n",
              "      <td>unknown</td>\n",
              "      <td>https://en.wikipedia.org/wiki/Terrible_Teddy,_...</td>\n",
              "      <td>Lasting just 61 seconds and consisting of two ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1902</td>\n",
              "      <td>Jack and the Beanstalk</td>\n",
              "      <td>American</td>\n",
              "      <td>George S. Fleming, Edwin S. Porter</td>\n",
              "      <td>NaN</td>\n",
              "      <td>unknown</td>\n",
              "      <td>https://en.wikipedia.org/wiki/Jack_and_the_Bea...</td>\n",
              "      <td>The earliest known adaptation of the classic f...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fd573069-9afb-49f0-b93d-3a9094f3c3ca')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fd573069-9afb-49f0-b93d-3a9094f3c3ca button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fd573069-9afb-49f0-b93d-3a9094f3c3ca');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yI-sF5NWIJjj",
        "outputId": "1c18dabc-5bd3-4765-f190-f30e050822e1"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(34886, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "np.unique (data ['Origin/Ethnicity'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2cF5aOkcIQDN",
        "outputId": "ba7e5967-b3c5-42ae-deb3-54054f6cfa3f"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['American', 'Assamese', 'Australian', 'Bangladeshi', 'Bengali',\n",
              "       'Bollywood', 'British', 'Canadian', 'Chinese', 'Egyptian',\n",
              "       'Filipino', 'Hong Kong', 'Japanese', 'Kannada', 'Malayalam',\n",
              "       'Malaysian', 'Maldivian', 'Marathi', 'Punjabi', 'Russian',\n",
              "       'South_Korean', 'Tamil', 'Telugu', 'Turkish'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "CHOOSE ONLY SOME PORTION OF DATA"
      ],
      "metadata": {
        "id": "HLM5mwNkU1Ts"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data2 = data.loc[(data['Origin/Ethnicity']=='American') & (data['Release Year']>2000)]\n",
        "len(data2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9Wn09hZAIghs",
        "outputId": "d4c86cb4-a667-47d3-b124-b9e7c2ffd298"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3595"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_data = pd.DataFrame(data2)"
      ],
      "metadata": {
        "id": "yUIsJ7KtJKzk"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "my_data.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 389
        },
        "id": "IWgwgxgfJX8v",
        "outputId": "676de066-1ba1-4567-de6b-d4e0dbbde34a"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Release Year                       Title Origin/Ethnicity  \\\n",
              "17372          2017               Crooked House         American   \n",
              "17373          2017                    Hostiles         American   \n",
              "17374          2017  All the Money in the World         American   \n",
              "17375          2017                Molly's Game         American   \n",
              "17376          2017              Phantom Thread         American   \n",
              "\n",
              "                    Director  \\\n",
              "17372  Gilles Paquet-Brenner   \n",
              "17373           Scott Cooper   \n",
              "17374           Ridley Scott   \n",
              "17375           Aaron Sorkin   \n",
              "17376   Paul Thomas Anderson   \n",
              "\n",
              "                                                    Cast  \\\n",
              "17372  Gilles Paquet-Brenner (director/screenplay); T...   \n",
              "17373  Scott Cooper (director/screenplay); Donald E. ...   \n",
              "17374  Ridley Scott (director); David Scarpa (screenp...   \n",
              "17375  Aaron Sorkin (director/screenplay); Jessica Ch...   \n",
              "17376  Paul Thomas Anderson (director/screenplay); Da...   \n",
              "\n",
              "                         Genre  \\\n",
              "17372    crime, drama, mystery   \n",
              "17373                  western   \n",
              "17374  biography, crime, drama   \n",
              "17375  biography, crime, drama   \n",
              "17376                    drama   \n",
              "\n",
              "                                               Wiki Page  \\\n",
              "17372  https://en.wikipedia.org/wiki/Crooked_House_(f...   \n",
              "17373      https://en.wikipedia.org/wiki/Hostiles_(film)   \n",
              "17374  https://en.wikipedia.org/wiki/All_the_Money_in...   \n",
              "17375       https://en.wikipedia.org/wiki/Molly%27s_Game   \n",
              "17376       https://en.wikipedia.org/wiki/Phantom_Thread   \n",
              "\n",
              "                                                    Plot  \n",
              "17372  The granddaughter of late business tycoon Aris...  \n",
              "17373  In 1892, settler Wesley Quaid and his family a...  \n",
              "17374  In 1973, 16-year-old John Paul Getty III (Paul...  \n",
              "17375  Molly Bloom is world-class mogul skier with Ol...  \n",
              "17376  In 1954 London, renowned fashion designer Reyn...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-47b0ffe8-e024-4208-a0f5-88f47ae8ed78\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Release Year</th>\n",
              "      <th>Title</th>\n",
              "      <th>Origin/Ethnicity</th>\n",
              "      <th>Director</th>\n",
              "      <th>Cast</th>\n",
              "      <th>Genre</th>\n",
              "      <th>Wiki Page</th>\n",
              "      <th>Plot</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>17372</th>\n",
              "      <td>2017</td>\n",
              "      <td>Crooked House</td>\n",
              "      <td>American</td>\n",
              "      <td>Gilles Paquet-Brenner</td>\n",
              "      <td>Gilles Paquet-Brenner (director/screenplay); T...</td>\n",
              "      <td>crime, drama, mystery</td>\n",
              "      <td>https://en.wikipedia.org/wiki/Crooked_House_(f...</td>\n",
              "      <td>The granddaughter of late business tycoon Aris...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17373</th>\n",
              "      <td>2017</td>\n",
              "      <td>Hostiles</td>\n",
              "      <td>American</td>\n",
              "      <td>Scott Cooper</td>\n",
              "      <td>Scott Cooper (director/screenplay); Donald E. ...</td>\n",
              "      <td>western</td>\n",
              "      <td>https://en.wikipedia.org/wiki/Hostiles_(film)</td>\n",
              "      <td>In 1892, settler Wesley Quaid and his family a...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17374</th>\n",
              "      <td>2017</td>\n",
              "      <td>All the Money in the World</td>\n",
              "      <td>American</td>\n",
              "      <td>Ridley Scott</td>\n",
              "      <td>Ridley Scott (director); David Scarpa (screenp...</td>\n",
              "      <td>biography, crime, drama</td>\n",
              "      <td>https://en.wikipedia.org/wiki/All_the_Money_in...</td>\n",
              "      <td>In 1973, 16-year-old John Paul Getty III (Paul...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17375</th>\n",
              "      <td>2017</td>\n",
              "      <td>Molly's Game</td>\n",
              "      <td>American</td>\n",
              "      <td>Aaron Sorkin</td>\n",
              "      <td>Aaron Sorkin (director/screenplay); Jessica Ch...</td>\n",
              "      <td>biography, crime, drama</td>\n",
              "      <td>https://en.wikipedia.org/wiki/Molly%27s_Game</td>\n",
              "      <td>Molly Bloom is world-class mogul skier with Ol...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17376</th>\n",
              "      <td>2017</td>\n",
              "      <td>Phantom Thread</td>\n",
              "      <td>American</td>\n",
              "      <td>Paul Thomas Anderson</td>\n",
              "      <td>Paul Thomas Anderson (director/screenplay); Da...</td>\n",
              "      <td>drama</td>\n",
              "      <td>https://en.wikipedia.org/wiki/Phantom_Thread</td>\n",
              "      <td>In 1954 London, renowned fashion designer Reyn...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-47b0ffe8-e024-4208-a0f5-88f47ae8ed78')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-47b0ffe8-e024-4208-a0f5-88f47ae8ed78 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-47b0ffe8-e024-4208-a0f5-88f47ae8ed78');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "finaldata = my_data[[\"Title\",\"Plot\"]]\n",
        "finaldata = finaldata.set_index(\"Title\")\n",
        "finaldata.head(50)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "uSf6l4umJhUP",
        "outputId": "69c80894-c077-41a0-fa23-7735d79a509d"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                                              Plot\n",
              "Title                                                                             \n",
              " 15 Minutes                      Ex-convicts Emil Slovak (Karel Roden) and Oleg...\n",
              "3000 Miles to Graceland          Outside of Las Vegas, Michael Zane, a recent p...\n",
              " A.I. Artificial Intelligence    In the late 22nd century, rising sea levels fr...\n",
              "The Affair of the Necklace       Jeanne de Saint-Rémy de Valois, orphaned at an...\n",
              "Ali                              The film begins with Cassius Clay, Jr. before ...\n",
              "All Over the Guy                 All Over the Guy is about Eli (Dan Bucatinsky)...\n",
              "Along Came a Spider              After Washington, D.C. detective, forensic psy...\n",
              "The Amati Girls                  The film centers around an Italian American fa...\n",
              "America's Sweethearts            Film publicist Lee Phillips is tasked with pro...\n",
              "The American Astronaut           Space travel has become a dirty way of life do...\n",
              "American Outlaws                 A group of Confederate guerillas are trying to...\n",
              "American Pie 2                   After their freshman year at college, the four...\n",
              "An American Rhapsody             In 1950, a Hungarian couple, Peter and Margit,...\n",
              "Amy's Orgasm                     Amy is a single 29 year old Jewish woman. She ...\n",
              "Angel Eyes                       On a wet rainy night in Chicago, police office...\n",
              "The Animal                       Marvin Mange (Rob Schneider) is an awkward, cl...\n",
              "The Anniversary Party            Sally Nash and Joe Therrian are a Hollywood co...\n",
              "Antitrust                        Working with his three friends at their new so...\n",
              "Atlantis: The Lost Empire        Many centuries ago, a large tidal wave trigger...\n",
              " Baby Boy                        A 20-year-old man named Joseph \"Jody\" Summers ...\n",
              "Bartleby                         The film opens with a brief summary of Herman ...\n",
              "A Beautiful Mind                 In 1947, John Nash (Crowe) arrives at Princeto...\n",
              "Behind Enemy Lines               In the final stages of the Bosnian War in Dece...\n",
              "The Believer                     Daniel Balint is a former Jewish yeshiva stude...\n",
              "Big Bad Love                     Big Bad Love shares its title and characters w...\n",
              "Black Hawk Down                  In 1993, following the ousting of the central ...\n",
              "Black Knight                     Jamal Walker (Martin Lawrence) is an everyday ...\n",
              "Blow                             A young George Jung and his parents Fred and E...\n",
              "Bones                            In 1979, Jimmy Bones (Snoop Dogg) is a numbers...\n",
              "The Brothers                     Jackson Smith (Chestnut), Brian Palmer (Bellam...\n",
              "Bubble Boy                       Born without an immune system, Jimmy Livingsto...\n",
              "Buffalo Soldiers                 It is almost the end of the Cold War in Europe...\n",
              "Bully                            Ali Willis and Lisa Connelly are friends with ...\n",
              "The Business of Strangers        Julie Styron (Channing) is a middle-aged busin...\n",
              " Captain Corelli's Mandolin      Greece's Ionian Islands are invaded by the Ita...\n",
              "The Cat's Meow                   November 15, 1924: Among those boarding the lu...\n",
              "Cats & Dogs                      Mrs. Carolyn Brody (Elizabeth Perkins) and her...\n",
              "The Caveman's Valentine          A former family man and pianist studying at Ju...\n",
              "The Center of the World          A couple checks into a suite in Las Vegas. In ...\n",
              "Corky Romano                     Veterinary technician Corky Romano (Chris Katt...\n",
              "CQ                               In Paris in 1969, young film editor Paul Balla...\n",
              "Crazy/Beautiful                  Nicole Oakley, the out-of-control daughter of ...\n",
              "Crocodile Dundee in Los Angeles  At the beginning of the film, protagonist Mich...\n",
              "Cruel Intentions 2               Troublemaker student Sebastian Valmont (Robin ...\n",
              "The Curse of the Jade Scorpion   In 1940, C.W. Briggs (Woody Allen) is an insur...\n",
              " The Deep End                    Margaret Hall (Swinton) and her family live an...\n",
              "Delivering Milo                  Elizabeth believes she has gone into labor, bu...\n",
              "Den                              The film begins with a bearded man waking up i...\n",
              "Domestic Disturbance             In Southport, Maryland, Susan Morrison (Teri P...\n",
              "Don't Say a Word                 In 1991, a gang of thieves steal a rare $10-mi..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-612703e7-9658-44e3-9987-de017629ebaf\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Plot</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Title</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>15 Minutes</th>\n",
              "      <td>Ex-convicts Emil Slovak (Karel Roden) and Oleg...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3000 Miles to Graceland</th>\n",
              "      <td>Outside of Las Vegas, Michael Zane, a recent p...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>A.I. Artificial Intelligence</th>\n",
              "      <td>In the late 22nd century, rising sea levels fr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>The Affair of the Necklace</th>\n",
              "      <td>Jeanne de Saint-Rémy de Valois, orphaned at an...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ali</th>\n",
              "      <td>The film begins with Cassius Clay, Jr. before ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>All Over the Guy</th>\n",
              "      <td>All Over the Guy is about Eli (Dan Bucatinsky)...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Along Came a Spider</th>\n",
              "      <td>After Washington, D.C. detective, forensic psy...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>The Amati Girls</th>\n",
              "      <td>The film centers around an Italian American fa...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>America's Sweethearts</th>\n",
              "      <td>Film publicist Lee Phillips is tasked with pro...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>The American Astronaut</th>\n",
              "      <td>Space travel has become a dirty way of life do...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>American Outlaws</th>\n",
              "      <td>A group of Confederate guerillas are trying to...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>American Pie 2</th>\n",
              "      <td>After their freshman year at college, the four...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>An American Rhapsody</th>\n",
              "      <td>In 1950, a Hungarian couple, Peter and Margit,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Amy's Orgasm</th>\n",
              "      <td>Amy is a single 29 year old Jewish woman. She ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Angel Eyes</th>\n",
              "      <td>On a wet rainy night in Chicago, police office...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>The Animal</th>\n",
              "      <td>Marvin Mange (Rob Schneider) is an awkward, cl...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>The Anniversary Party</th>\n",
              "      <td>Sally Nash and Joe Therrian are a Hollywood co...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Antitrust</th>\n",
              "      <td>Working with his three friends at their new so...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Atlantis: The Lost Empire</th>\n",
              "      <td>Many centuries ago, a large tidal wave trigger...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Baby Boy</th>\n",
              "      <td>A 20-year-old man named Joseph \"Jody\" Summers ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Bartleby</th>\n",
              "      <td>The film opens with a brief summary of Herman ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>A Beautiful Mind</th>\n",
              "      <td>In 1947, John Nash (Crowe) arrives at Princeto...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Behind Enemy Lines</th>\n",
              "      <td>In the final stages of the Bosnian War in Dece...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>The Believer</th>\n",
              "      <td>Daniel Balint is a former Jewish yeshiva stude...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Big Bad Love</th>\n",
              "      <td>Big Bad Love shares its title and characters w...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Black Hawk Down</th>\n",
              "      <td>In 1993, following the ousting of the central ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Black Knight</th>\n",
              "      <td>Jamal Walker (Martin Lawrence) is an everyday ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Blow</th>\n",
              "      <td>A young George Jung and his parents Fred and E...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Bones</th>\n",
              "      <td>In 1979, Jimmy Bones (Snoop Dogg) is a numbers...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>The Brothers</th>\n",
              "      <td>Jackson Smith (Chestnut), Brian Palmer (Bellam...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Bubble Boy</th>\n",
              "      <td>Born without an immune system, Jimmy Livingsto...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Buffalo Soldiers</th>\n",
              "      <td>It is almost the end of the Cold War in Europe...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Bully</th>\n",
              "      <td>Ali Willis and Lisa Connelly are friends with ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>The Business of Strangers</th>\n",
              "      <td>Julie Styron (Channing) is a middle-aged busin...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Captain Corelli's Mandolin</th>\n",
              "      <td>Greece's Ionian Islands are invaded by the Ita...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>The Cat's Meow</th>\n",
              "      <td>November 15, 1924: Among those boarding the lu...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cats &amp; Dogs</th>\n",
              "      <td>Mrs. Carolyn Brody (Elizabeth Perkins) and her...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>The Caveman's Valentine</th>\n",
              "      <td>A former family man and pianist studying at Ju...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>The Center of the World</th>\n",
              "      <td>A couple checks into a suite in Las Vegas. In ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Corky Romano</th>\n",
              "      <td>Veterinary technician Corky Romano (Chris Katt...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CQ</th>\n",
              "      <td>In Paris in 1969, young film editor Paul Balla...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Crazy/Beautiful</th>\n",
              "      <td>Nicole Oakley, the out-of-control daughter of ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Crocodile Dundee in Los Angeles</th>\n",
              "      <td>At the beginning of the film, protagonist Mich...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cruel Intentions 2</th>\n",
              "      <td>Troublemaker student Sebastian Valmont (Robin ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>The Curse of the Jade Scorpion</th>\n",
              "      <td>In 1940, C.W. Briggs (Woody Allen) is an insur...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>The Deep End</th>\n",
              "      <td>Margaret Hall (Swinton) and her family live an...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Delivering Milo</th>\n",
              "      <td>Elizabeth believes she has gone into labor, bu...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Den</th>\n",
              "      <td>The film begins with a bearded man waking up i...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Domestic Disturbance</th>\n",
              "      <td>In Southport, Maryland, Susan Morrison (Teri P...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Don't Say a Word</th>\n",
              "      <td>In 1991, a gang of thieves steal a rare $10-mi...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-612703e7-9658-44e3-9987-de017629ebaf')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-612703e7-9658-44e3-9987-de017629ebaf button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-612703e7-9658-44e3-9987-de017629ebaf');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "finaldata[\"Plot\"][\"Don't Say a Word\"]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "yYR2_J2VKKo7",
        "outputId": "34b0b988-2d37-4bfb-a26f-932e3ea3f0ed"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "\"In 1991, a gang of thieves steal a rare $10-million gem, but, in the process, two of the gang double-cross their leader, Patrick Koster (Sean Bean) and take off with the precious stone.\\r\\nTen years later, on the day before Thanksgiving, prominent private practice Manhattan child psychiatrist, Dr. Nathan R. Conrad (Michael Douglas), is invited by his friend and former colleague, Dr. Louis Sachs (Oliver Platt), to examine a disturbed young lady named Elisabeth Burrows (Brittany Murphy) at the state sanatorium.\\r\\nHaving been released from prison on November 4, Patrick and the remaining gang members break into an apartment which overlooks Nathan's apartment, where he lives with his wife Aggie (Famke Janssen) and daughter Jessie (Skye McCole Bartusiak). That evening, Patrick kidnaps Jessie as a means of forcing Nathan to acquire a six-digit number from Elisabeth's memory. As Nathan visits Elisabeth, she is reluctant at first, but he gains her trust later—especially when he reveals that Jessie has been kidnapped and will be killed if he does not get the number they want. Sachs admits to Nathan that the gang who kidnapped Jessie also kidnapped his girlfriend to force him to acquire the number from Elisabeth. Sachs is then visited by Detective Sandra Cassidy (Jennifer Esposito) who reveals to him that his girlfriend has been found dead. Meanwhile, Aggie hears Jessie's voice and realizes the kidnappers reside in the apartment nearby. The kidnappers send one of them to kill Aggie while the others escape with Jessie, but Aggie sets an ambush and kills him.\\r\\nAfter Nathan takes Elisabeth out of the sanatorium, she remembers certain events regarding the gang. It is revealed that Elisabeth's father was a member of the gang that committed the robbery ten years prior and that he double-crossed them and took the stolen gem. However, other members of the gang later found him and ordered him to reveal where he had hidden the gem, subsequently pushing him in front of a subway train. The gang members were arrested immediately, and Elisabeth escaped with her doll in which the gem was hidden. She also remembers that the required number, 815508, is the number of her father's grave at Hart Island and that her doll is placed beside him in the coffin. She explains that she had stowed away on a boat that was taking her father's coffin for burial in Potter's field on Hart Island, where the gravediggers put the doll, named Mischka, inside.\\r\\nNathan and Elisabeth steal a boat to reach Hart Island. The gang members track them down and demand that Nathan give them the number they want. Elisabeth reveals the number and Patrick orders his companion to exhume her father's coffin after releasing Jessie. He finds the doll and the gem hidden inside it. He then decides to kill Nathan and Elisabeth, but Cassidy arrives before he can shoot them. Patrick's companion is shot by Cassidy, but Patrick manages to wound her. Taking advantage of the confusion, Nathan takes the gem from Patrick and throws it to a nearby excavation machine. Patrick goes to recover the gem, but Nathan triggers the mechanism which covers Patrick with earth, burying him alive. Nathan reunites with Aggie and Jessie, and invites Elisabeth to live with them.\""
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "PREPROCESS THE DATA"
      ],
      "metadata": {
        "id": "3gnZQVqEU9gu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import nltk\n",
        "nltk.download('punkt')\n",
        "nltk.download('averaged_perceptron_tagger')\n",
        "nltk.download('wordnet')\n",
        "nltk.download('stopwords')\n",
        "\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "from nltk.corpus import stopwords\n",
        "\n",
        "lemmatizer = WordNetLemmatizer()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OEz6XTUcKwcA",
        "outputId": "d6dacded-a10d-4f46-dd8e-558ae8cd9dbd"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n",
            "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
            "[nltk_data]     /root/nltk_data...\n",
            "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
            "[nltk_data]       date!\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data]   Package wordnet is already up-to-date!\n",
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def preprocess_sentences(text):\n",
        "  text = text.lower()\n",
        "  words = nltk.word_tokenize(text)\n",
        "  my_sent = [lemmatizer.lemmatize(word) for word in words if word not in stopwords.words('english')]\n",
        "  finalsent = ' '.join(my_sent)\n",
        "  \n",
        "  finalsent = finalsent.replace(\"n't\",\" not\")\n",
        "  finalsent = finalsent.replace(\"'m\", \"am\")\n",
        "  finalsent = finalsent.replace(\"'s\",\" is\")\n",
        "  finalsent = finalsent.replace(\"'re\", \"are\")\n",
        "  finalsent = finalsent.replace(\"'11\", \" will\")\n",
        "  finalsent = finalsent.replace(\"'ve\", \" have\")\n",
        "  finalsent = finalsent.replace(\"'d\", \" would\")\n",
        "\n",
        "  return finalsent\n",
        "\n",
        "finaldata[\"new_plot\"]= finaldata[\"Plot\"].apply(preprocess_sentences)\n",
        "finaldata.head()\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "1qEgYlB3L9ug",
        "outputId": "bdac35a1-000d-48a2-b732-fcc7c639759d"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                                            Plot  \\\n",
              "Title                                                                              \n",
              " 15 Minutes                    Ex-convicts Emil Slovak (Karel Roden) and Oleg...   \n",
              "3000 Miles to Graceland        Outside of Las Vegas, Michael Zane, a recent p...   \n",
              " A.I. Artificial Intelligence  In the late 22nd century, rising sea levels fr...   \n",
              "The Affair of the Necklace     Jeanne de Saint-Rémy de Valois, orphaned at an...   \n",
              "Ali                            The film begins with Cassius Clay, Jr. before ...   \n",
              "\n",
              "                                                                        new_plot  \n",
              "Title                                                                             \n",
              " 15 Minutes                    ex-convicts emil slovak ( karel roden ) oleg r...  \n",
              "3000 Miles to Graceland        outside la vega , michael zane , recent parole...  \n",
              " A.I. Artificial Intelligence  late 22nd century , rising sea level global wa...  \n",
              "The Affair of the Necklace     jeanne de saint-rémy de valois , orphaned earl...  \n",
              "Ali                            film begin cassius clay , jr. championship deb...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-50f6c24e-7c92-4f25-881d-d5ee068f04d6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Plot</th>\n",
              "      <th>new_plot</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Title</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>15 Minutes</th>\n",
              "      <td>Ex-convicts Emil Slovak (Karel Roden) and Oleg...</td>\n",
              "      <td>ex-convicts emil slovak ( karel roden ) oleg r...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3000 Miles to Graceland</th>\n",
              "      <td>Outside of Las Vegas, Michael Zane, a recent p...</td>\n",
              "      <td>outside la vega , michael zane , recent parole...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>A.I. Artificial Intelligence</th>\n",
              "      <td>In the late 22nd century, rising sea levels fr...</td>\n",
              "      <td>late 22nd century , rising sea level global wa...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>The Affair of the Necklace</th>\n",
              "      <td>Jeanne de Saint-Rémy de Valois, orphaned at an...</td>\n",
              "      <td>jeanne de saint-rémy de valois , orphaned earl...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ali</th>\n",
              "      <td>The film begins with Cassius Clay, Jr. before ...</td>\n",
              "      <td>film begin cassius clay , jr. championship deb...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-50f6c24e-7c92-4f25-881d-d5ee068f04d6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-50f6c24e-7c92-4f25-881d-d5ee068f04d6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-50f6c24e-7c92-4f25-881d-d5ee068f04d6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "USING TF-IDF TO VECTORIZE PREPROCESSED MOVIE PLOTS"
      ],
      "metadata": {
        "id": "4zFF8fnCVC14"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "\n",
        "tfidf = TfidfVectorizer()\n",
        "tfidf_movieid = tfidf.fit_transform(finaldata[\"new_plot\"])\n",
        "\n",
        "#Cosign similarity between vectors(smaller the angle higher the similarity)\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "similarity = cosine_similarity(tfidf_movieid, tfidf_movieid)\n"
      ],
      "metadata": {
        "id": "IJ-dOLYGT7AN"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "indices = pd.Series(finaldata.index)\n",
        "\n",
        "def recommendations (title, cosine_sim = similarity):\n",
        "  try:\n",
        "    index = indices[indices == title].index[0]\n",
        "    similarity_scores = pd. Series (cosine_sim[index]).sort_values(ascending = False)\n",
        "    top_10_movies = list(similarity_scores.iloc[1:11].index)\n",
        "    recommended_movies = [list(finaldata.index)[i] for i in top_10_movies]\n",
        "    return recommended_movies\n",
        "  except:\n",
        "    print (\"No movie name found\")"
      ],
      "metadata": {
        "id": "axT9hNZ0Q6bh"
      },
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "FINAL PREDICTION "
      ],
      "metadata": {
        "id": "ax9XjvojVMit"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "recommendations(\"Fast & Furious\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Op6lDE_sT5Vv",
        "outputId": "0fde72c6-2687-487e-d1a7-eabe8eb4a3b1"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[' The Fast and the Furious',\n",
              " 'Youth Without Youth',\n",
              " 'Starter for 10',\n",
              " 'Love & Mercy',\n",
              " 'Fast Five',\n",
              " 'Fast & Furious 6',\n",
              " 'Thunderstruck',\n",
              " '2 Fast 2 Furious',\n",
              " 'Furious 7',\n",
              " \"My Baby's Daddy\"]"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "recommendations(\"kaho na pyar hai\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V-2zEZlCX3dE",
        "outputId": "5132dea3-1d96-4995-df47-20fabec4ce50"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "No movie name found\n"
          ]
        }
      ]
    }
  ]
}